name: Server Manager CD

on:
  push:
    branches: [ 'main' ]
    
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: main-cluster
  GKE_ZONE: europe-west1-b
  IMAGE: jtm-server-manager
  NAME: server-manager

jobs:
  docker-build-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: JDK 1.8 Set up
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Grant execute permissions for gradlew
      run: |
        chmod +x gradlew
    
    - name: Cache gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Gradle build
      run: |
        ./gradlew build
        
    - name: Cleanup Gradle cache
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
          
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
      
    - run: |-
        gcloud --quiet auth configure-docker
    
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    
    - name: Build image
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:latest" .
     
    - name: Publish image
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:latest"
        
  deploy:
    name: Deploy services
    runs-on: ubuntu-latest
    needs: [docker-build-publish]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        kubectl rollout restart deployment/$NAME
